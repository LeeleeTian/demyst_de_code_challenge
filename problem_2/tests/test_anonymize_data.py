import unittest
import os
import csv
import glob
import shutil
from generate_csv import generate_csv
from anonymize_data import anonymize_data

class TestAnonymizeData(unittest.TestCase):

    def setUp(self):
        self.input_dir = "/app/output/test_input"
        self.output_dir = "/app/output/test_output"
        generate_csv(0.001, self.input_dir)  # Approx 1MB file for testing
    
    def tearDown(self):
        # Cleanup: Remove the test input and output directories and their contents if they exist
        if os.path.exists(self.input_dir):
            shutil.rmtree(self.input_dir)
        
        if os.path.exists(self.output_dir):
            shutil.rmtree(self.output_dir)
    
    def test_anonymize_data(self):
        anonymize_data(self.input_dir, self.output_dir)

        # Find the part file generated by Spark for output
        part_files = glob.glob(f"{self.output_dir}/part-*")
        self.assertTrue(part_files, "No part files found in output directory")

        with open(part_files[0], 'r') as f:
            reader = csv.reader(f)
            rows = list(reader)

        # Check that each row has exactly four fields
        self.assertTrue(all(len(row) == 4 for row in rows[1:]))

        # Check that names and addresses have been anonymized
        for row in rows[1:]:
            first_name, last_name, address, _ = row
            self.assertEqual(first_name.strip(), "JOHN")
            self.assertEqual(last_name.strip(), "DOE")
            self.assertEqual(address.strip(), "123 Main Street, City, State")

if __name__ == "__main__":
    unittest.main()
